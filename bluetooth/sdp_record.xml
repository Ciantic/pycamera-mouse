<?xml version="1.0" encoding="UTF-8" ?>

<record>
	<attribute id="0x0001">
		<sequence>
			<uuid value="0x1124" />
		</sequence>
	</attribute>
	<attribute id="0x0004">
		<sequence>
			<sequence>
				<uuid value="0x0100" />
				<uint16 value="0x0011" />
			</sequence>
			<sequence>
				<uuid value="0x0011" />
			</sequence>
		</sequence>
	</attribute>
	<attribute id="0x0005">
		<sequence>
			<uuid value="0x1002" />
		</sequence>
	</attribute>
	<attribute id="0x0006">
		<sequence>
			<uint16 value="0x656e" />
			<uint16 value="0x006a" />
			<uint16 value="0x0100" />
		</sequence>
	</attribute>
	<attribute id="0x0009">
		<sequence>
			<sequence>
				<uuid value="0x1124" />
				<uint16 value="0x0100" />
			</sequence>
		</sequence>
	</attribute>
	<attribute id="0x000d">
		<sequence>
			<sequence>
				<sequence>
					<uuid value="0x0100" />
					<uint16 value="0x0013" />
				</sequence>
				<sequence>
					<uuid value="0x0011" />
				</sequence>
			</sequence>
		</sequence>
	</attribute>
	<attribute id="0x0100">
		<text value="Raspberry Pi Virtual Keyboard" />
	</attribute>
	<attribute id="0x0101">
		<text value="USB > BT Keyboard/Mouse" />
	</attribute>
	<attribute id="0x0102">
		<text value="Raspberry Pi" />
	</attribute>
	<attribute id="0x0200">
		<uint16 value="0x0100" />
	</attribute>
	<attribute id="0x0201">
		<uint16 value="0x0111" />
	</attribute>
	<attribute id="0x0202">
		<uint8 value="0x40" />
	</attribute>
	<attribute id="0x0203">
		<uint8 value="0x00" />
	</attribute>
	<attribute id="0x0204">
		<boolean value="false" />
	</attribute>
	<attribute id="0x0205">
		<boolean value="false" />
	</attribute>
	<attribute id="0x0206">
		<sequence>
			<sequence>
				<uint8 value="0x22" />
				<!-- This descriptor is Keyboard, Mouse, and Media keys: -->

				<text encoding="hex" value="05010906a101850175019508050719e029e715002501810295017508810395057501050819012905910295017503910395067508150026ff000507190029ff8100c005010902A10185020901A1000509190129031500250175019503810275059501810105010930093109381581257F750895038106C0C0050c0901a1018503150025017501950b0a23020a21020ab10109b809b609cd09b509e209ea09e9093081029501750d8103c0"/>
				
				<!--  
				https://eleccelerator.com/usbdescreqparser/

					0x05, 0x01,        // Usage Page (Generic Desktop Ctrls)
					0x09, 0x06,        // Usage (Keyboard)
					0xA1, 0x01,        // Collection (Application)
					0x85, 0x01,        //   Report ID (1)
					0x75, 0x01,        //   Report Size (1)
					0x95, 0x08,        //   Report Count (8)
					0x05, 0x07,        //   Usage Page (Kbrd/Keypad)
					0x19, 0xE0,        //   Usage Minimum (0xE0)
					0x29, 0xE7,        //   Usage Maximum (0xE7)
					0x15, 0x00,        //   Logical Minimum (0)
					0x25, 0x01,        //   Logical Maximum (1)
					0x81, 0x02,        //   Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
					0x95, 0x01,        //   Report Count (1)
					0x75, 0x08,        //   Report Size (8)
					0x81, 0x03,        //   Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
					0x95, 0x05,        //   Report Count (5)
					0x75, 0x01,        //   Report Size (1)
					0x05, 0x08,        //   Usage Page (LEDs)
					0x19, 0x01,        //   Usage Minimum (Num Lock)
					0x29, 0x05,        //   Usage Maximum (Kana)
					0x91, 0x02,        //   Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
					0x95, 0x01,        //   Report Count (1)
					0x75, 0x03,        //   Report Size (3)
					0x91, 0x03,        //   Output (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
					0x95, 0x06,        //   Report Count (6)
					0x75, 0x08,        //   Report Size (8)
					0x15, 0x00,        //   Logical Minimum (0)
					0x26, 0xFF, 0x00,  //   Logical Maximum (255)
					0x05, 0x07,        //   Usage Page (Kbrd/Keypad)
					0x19, 0x00,        //   Usage Minimum (0x00)
					0x29, 0xFF,        //   Usage Maximum (0xFF)
					0x81, 0x00,        //   Input (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position)
					0xC0,              // End Collection
					0x05, 0x01,        // Usage Page (Generic Desktop Ctrls)
					0x09, 0x02,        // Usage (Mouse)
					0xA1, 0x01,        // Collection (Application)
					0x85, 0x02,        //   Report ID (2)
					0x09, 0x01,        //   Usage (Pointer)
					0xA1, 0x00,        //   Collection (Physical)
					0x05, 0x09,        //     Usage Page (Button)
					0x19, 0x01,        //     Usage Minimum (0x01)
					0x29, 0x03,        //     Usage Maximum (0x03)
					0x15, 0x00,        //     Logical Minimum (0)
					0x25, 0x01,        //     Logical Maximum (1)
					0x75, 0x01,        //     Report Size (1)
					0x95, 0x03,        //     Report Count (3)
					0x81, 0x02,        //     Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
					0x75, 0x05,        //     Report Size (5)
					0x95, 0x01,        //     Report Count (1)
					0x81, 0x01,        //     Input (Const,Array,Abs,No Wrap,Linear,Preferred State,No Null Position)
					0x05, 0x01,        //     Usage Page (Generic Desktop Ctrls)
					0x09, 0x30,        //     Usage (X)
					0x09, 0x31,        //     Usage (Y)
					0x09, 0x38,        //     Usage (Wheel)
					0x15, 0x81,        //     Logical Minimum (-127)
					0x25, 0x7F,        //     Logical Maximum (127)
					0x75, 0x08,        //     Report Size (8)
					0x95, 0x03,        //     Report Count (3)
					0x81, 0x06,        //     Input (Data,Var,Rel,No Wrap,Linear,Preferred State,No Null Position)
					0xC0,              //   End Collection
					0xC0,              // End Collection
					0x05, 0x0C,        // Usage Page (Consumer)
					0x09, 0x01,        // Usage (Consumer Control)
					0xA1, 0x01,        // Collection (Application)
					0x85, 0x03,        //   Report ID (3)
					0x15, 0x00,        //   Logical Minimum (0)
					0x25, 0x01,        //   Logical Maximum (1)
					0x75, 0x01,        //   Report Size (1)
					0x95, 0x0B,        //   Report Count (11)
					0x0A, 0x23, 0x02,  //   Usage (AC Home)
					0x0A, 0x21, 0x02,  //   Usage (AC Search)
					0x0A, 0xB1, 0x01,  //   Usage (AL Screen Saver)
					0x09, 0xB8,        //   Usage (Eject)
					0x09, 0xB6,        //   Usage (Scan Previous Track)
					0x09, 0xCD,        //   Usage (Play/Pause)
					0x09, 0xB5,        //   Usage (Scan Next Track)
					0x09, 0xE2,        //   Usage (Mute)
					0x09, 0xEA,        //   Usage (Volume Decrement)
					0x09, 0xE9,        //   Usage (Volume Increment)
					0x09, 0x30,        //   Usage (Power)
					0x81, 0x02,        //   Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
					0x95, 0x01,        //   Report Count (1)
					0x75, 0x0D,        //   Report Size (13)
					0x81, 0x03,        //   Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
					0xC0,              // End Collection

					// 170 bytes
				-->
			</sequence>
		</sequence>
	</attribute>
	<attribute id="0x0207">
		<sequence>
			<sequence>
				<uint16 value="0x0409" />
				<uint16 value="0x0100" />
			</sequence>
		</sequence>
	</attribute>
	<attribute id="0x020b">
		<uint16 value="0x0100" />
	</attribute>
	<attribute id="0x020c">
		<uint16 value="0x0c80" />
	</attribute>
	<attribute id="0x020d">
		<boolean value="true" />
	</attribute>
	<attribute id="0x020e">
		<boolean value="false" />
	</attribute>
	<attribute id="0x020f">
		<uint16 value="0x0640" />
	</attribute>
	<attribute id="0x0210">
		<uint16 value="0x0320" />
	</attribute>
</record>